START
    INPUT: Segmentation Name from the User
        input = {
            seg_name: "loyal customers",
            main_category: "",
            usb_category:"",
            attributes
        }

        Prompt = """
            I have a segmentation group called "Happy Land," and I would like to organize its attributes. Below is an example of how the structure looks:
            {
                "main_category_1": {
                    "sub_attributes": ["sub_attr_1", "sub_attr_2", "sub_attr_3"],
                    "explanation": "Explanation for main_category_1 and its relevance."
                },
                "main_category_2": {
                    "sub_attributes": ["sub_attr_4", "sub_attr_5"],
                    "explanation": "Explanation for main_category_2 and its relevance."
                }
            }

            Please suggest main attributes and their corresponding sub-attributes for the segmentation group "Happy Land." Return the result as a Python dictionary, where each main attribute maps to a dictionary containing:
            - "sub_attributes" (a list of sub-attributes).
            - "explanation" (a short explanation of the main attribute and its relevance).
        """

    IF the segmentation name or a similar name exists in the database THEN
        Retrieve stored segmentation logic
        SEND to Frontend with explanations
        WAIT for User Feedback

        IF the User Accepts THEN
            WAIT for if the user wants to refine or edit the response from LLM
            Store segmentation logic in database
        ELSE
            Gather user feedback
            Reorganize the query with feedback
            SEND to LlamaIndex for updated recommendations
            GO BACK to waiting for user feedback
        ENDIF
    ELSE
        Retrieve predefined categories, subcategories, and attributes from PostgreSQL
        SEND to LlamaIndex for initial recommendations
        RECEIVE Recommendations

        SEND to Frontend with explanations
        WAIT for User Feedback

        IF the User Accepts THEN
            WAIT for if the user wants to refine or edit the response from LLM
            Store segmentation logic in database 
        ELSE
            Gather user feedback
            Reorganize the query with feedback
            SEND to LlamaIndex for updated recommendations
            GO BACK to waiting for user feedback
        ENDIF
    ENDIF
END
